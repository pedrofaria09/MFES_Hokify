class TestAll is subclass of MyTestCase
types
-- TODO Define types here
values
-- TODO Define values here
instance variables
-- TODO Define instance variables here
operations
-- TODO Define operations here
public TestPlayerFirst :() ==> ()
TestPlayerFirst() ==
(
	dcl user : Utilizador := new Utilizador("Pedro","email@email.com",<Masculino>,<Licenciatura>,"Portugal","Porto",27,123456789);
	user.addInteresse("Informatica");
	user.addInteresse("Cinema");
	user.addSkills("Java");
	user.addSkills("VDM");
	
	assertEqual(user.getNome(),"Pedro");
	assertEqual(user.getEmail(),"email@email.com");
	assertEqual(user.getSexo(),<Masculino>);
	assertEqual(user.getEscolaridade(),<Licenciatura>);
	assertEqual(user.getPais(),"Portugal");
	assertEqual(user.getLocalidade(),"Porto");
	assertEqual(user.getIdade(),27);
	assertEqual(user.getTelefone(),123456789);
	assertEqual(user.getInteresses(),{"Informatica","Cinema"});
	assertEqual(user.getSkills(),{"Java","VDM"});
	
	user.removeInteresse("Cinema");
	assertEqual(user.getInteresses(),{"Informatica"});
	
	user.removeSkills("VDM");
	assertEqual(user.getSkills(),{"Java"});
	
	user.setNome("Pedro Faria");
	user.setEmail("PedroFaria@gmail.com");
	user.setPais("Espanha");
	user.setLocalidade("Madrid");
	user.setEscolaridade(<Mestrado>);
	user.setTelefone(987654321);
	user.setEscolaridade(<Mestrado>);
	assertEqual(user.getNome(),"Pedro Faria");
	assertEqual(user.getEmail(),"PedroFaria@gmail.com");
	assertEqual(user.getPais(),"Espanha");
	assertEqual(user.getLocalidade(),"Madrid");
	assertEqual(user.getEscolaridade(),<Mestrado>);
	assertEqual(user.getTelefone(),987654321);
	assertEqual(user.getEscolaridade(),<Mestrado>);
	
	--deve falhar pois estamos adicionando um duplicado
	--user.addInteresse("Informatica");
	--user.addSkills("Java");
	
	return;
);


public TestTrabalhoFirst :() ==> ()
TestTrabalhoFirst() ==
(
	dcl trabalho : Trabalho := new Trabalho("Programador de java","Google","google@google.pt",<Licenciatura>,123456789,"Portugal","Porto");
	trabalho.addInteresse("Informatica");
	trabalho.addInteresse("Cinema");
	trabalho.addSkills("Java");
	trabalho.addSkills("VDM");
	
	assertEqual(trabalho.getNome(),"Programador de java");
	assertEqual(trabalho.getEntidade(), "Google");
	assertEqual(trabalho.getEmail(),"google@google.pt");
	assertEqual(trabalho.getEscolaridade(),<Licenciatura>);
	assertEqual(trabalho.getTelefone(),123456789);
	assertEqual(trabalho.getPais(),"Portugal");
	assertEqual(trabalho.getLocalidade(),"Porto");
	assertEqual(trabalho.getInteresses(),{"Informatica","Cinema"});
	assertEqual(trabalho.getSkills(),{"Java","VDM"});
	
	trabalho.removeInteresse("Cinema");
	assertEqual(trabalho.getInteresses(),{"Informatica"});
	
	trabalho.removeSkills("VDM");
	assertEqual(trabalho.getSkills(),{"Java"});
	
	trabalho.setNome("Programador de C++");
	trabalho.setEntidade("apple");
	trabalho.setEmail("apple@apple.pt");
	trabalho.setPais("Espanha");
	trabalho.setLocalidade("Madrid");
	trabalho.setTelefone(987654321);
	trabalho.setEscolaridade(<Mestrado>);
	assertEqual(trabalho.getNome(),"Programador de C++");
	assertEqual(trabalho.getEmail(),"apple@apple.pt");
	assertEqual(trabalho.getPais(),"Espanha");
	assertEqual(trabalho.getLocalidade(),"Madrid");
	assertEqual(trabalho.getTelefone(),987654321);
	assertEqual(trabalho.getEscolaridade(),<Mestrado>);

	return;
);


public TestHokify :() ==> ()
TestHokify() ==
(
	dcl hokify : Hokify := new Hokify();
	dcl utilizador : Utilizador := new Utilizador("Pedro","email@email.com",<Masculino>,<Licenciatura>,"Portugal","Porto",27,123456789);
	dcl trabalho : Trabalho := new Trabalho("Programador de java","Google","google@google.pt",<Licenciatura>,123456789,"Portugal","Porto");
	dcl sameuser : Utilizador := new Utilizador("Pedro","email@email.com",<Masculino>,<Licenciatura>,"Portugal","Porto",27,123456789);
	dcl sametrabalho : Trabalho := new Trabalho("Programador de java","Google","google@google.pt",<Licenciatura>,123456789,"Portugal","Porto");
	dcl utilizador2 : Utilizador := new Utilizador("Fabiola","gmail@gmail.com",<Feminino>,<Mestrado>,"Portugal","Lisboa",26,123123123);
	dcl trabalho2 : Trabalho := new Trabalho("Programador de c++","Apple","apple@apple.pt",<Licenciatura>,4562343434,"Portugal","Lisboa");
	
	hokify.addUtilizadores(utilizador);
	hokify.addTrabalhos(trabalho);
	assertEqual(card hokify.getUtilizadores(),1);
	assertEqual(card hokify.getTrabalhos(),1);
	
	hokify.addUtilizadores(utilizador2);
	hokify.addTrabalhos(trabalho2);
	assertEqual(card hokify.getUtilizadores(),2);
	assertEqual(card hokify.getTrabalhos(),2);
	
	--Deve falhar pois estamos adicionando um utilizador igual
	--hokify.addUtilizadores(sameuser);
	--hokify.addTrabalhos(sametrabalho);
	assertTrue(not hokify.sameUser(sameuser));
	assertTrue(not hokify.sameTrabalho(sametrabalho));
	
	return;
);


public static main: () ==> ()
main() ==
(
	IO`print("TestPlayerFirst -> ");
	new TestAll().TestPlayerFirst();
	IO`println("Passed");
	
	IO`print("TestTrabalhoFirst -> ");
	new TestAll().TestTrabalhoFirst();
	IO`println("Passed");
	
	IO`print("TestHokify -> ");
	new TestAll().TestHokify();
	IO`println("Passed");
);

functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end TestAll