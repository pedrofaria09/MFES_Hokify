class Utilizador
types
-- TODO Define types here
	public String = seq of char;
	public Sexo = <Masculino> | <Feminino>;
	public Interesses = set of String;
	
values
-- TODO Define values here

instance variables
-- TODO Define instance variables here
	private nome: String;
	private sexo: Sexo;
	private idade: nat1;
	private interesses: Interesses := {};
	
operations
-- TODO Define operations here

	--Construtor
	public Utilizador: String * Sexo * nat1 ==> Utilizador
	Utilizador(nm,sexoC,idadeC) == (
		nome := nm;
		sexo := sexoC;
		idade := idadeC;
		return self
	)
	post interesses = {} and
			nome = nm and
			sexo = sexoC and
			idade = idadeC;
	
	-- Adicionar interesses
	public addInteresse: String ==> ()
 	addInteresse(String) == interesses := interesses union {String}
 	pre String not in set interesses
 	post interesses = interesses~ union {String};
 	
 	-- Remover interesses
 	public removeInteresse: String ==> ()
 	removeInteresse(String) == interesses := interesses \ {String}
 	pre String in set interesses
 	post interesses = interesses~ \ {String};
 	
 	-- Retorna os interesses
 	public pure getInteresses : () ==> Interesses
	getInteresses() ==
	(
		return interesses;
	);
	
	-- Retorna o nome
	public pure getNome : () ==> String
	getNome() ==
	(
		return nome;
	);
	
functions
-- TODO Define functiones here

traces
-- TODO Define Combinatorial Test Traces here

end Utilizador